# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-07-01 20:00
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('globalconfigs', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FctEspecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cooking_method', models.IntegerField(choices=[(1, 'Raw'), (2, 'Not consumed'), (3, 'Fresh'), (4, 'Dried')])),
                ('dry', models.FloatField()),
                ('water', models.FloatField()),
                ('energy', models.FloatField()),
                ('protein', models.FloatField()),
                ('fat', models.FloatField()),
                ('ash', models.FloatField()),
                ('carbohidrate', models.FloatField()),
                ('ca', models.FloatField()),
                ('fe', models.FloatField()),
                ('mg', models.FloatField()),
                ('na', models.FloatField()),
                ('zn', models.FloatField()),
                ('vit_c', models.FloatField()),
                ('b1', models.FloatField()),
                ('b2', models.FloatField()),
                ('b3', models.FloatField()),
                ('pnto', models.FloatField()),
                ('b6', models.FloatField()),
                ('dfe', models.FloatField()),
                ('fol', models.FloatField()),
                ('folac', models.FloatField()),
                ('b12', models.FloatField()),
                ('va_re', models.FloatField()),
                ('va_rae', models.FloatField()),
                ('retinol', models.FloatField()),
                ('alcar', models.FloatField()),
                ('becar', models.FloatField()),
                ('becry', models.FloatField()),
                ('phy', models.FloatField()),
                ('lodine', models.FloatField()),
                ('fe_heme', models.FloatField()),
                ('fe_non_heme', models.FloatField()),
                ('iron_animal', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scientific_name', models.CharField(max_length=450)),
                ('common_name', models.CharField(blank=True, max_length=450, null=True)),
                ('cultivar', models.IntegerField(blank=True, choices=[(1, 'Animal'), (2, 'Plant')], null=True)),
                ('type_species', models.IntegerField(blank=True, choices=[(1, 'Annual'), (2, 'Perrenial')], null=True)),
                ('food_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='globalconfigs.FoodGroup')),
                ('name_family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='globalconfigs.NameFamily')),
                ('name_genus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='globalconfigs.NameGenus')),
                ('name_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='globalconfigs.NameOrder')),
                ('name_species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='globalconfigs.NameSpecies')),
            ],
            options={
                'ordering': ['scientific_name'],
                'verbose_name': 'Species',
                'verbose_name_plural': 'Species',
            },
        ),
        migrations.AddField(
            model_name='fctespecies',
            name='specie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='species.Species'),
        ),
        migrations.AlterUniqueTogether(
            name='species',
            unique_together=set([('scientific_name', 'common_name')]),
        ),
    ]
